// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String            @id @default(uuid()) @postgresql.Uuid
  firstName                   String            @default("")
  lastName                    String            @default("")
  email                       String            @unique @default("")
  isEmailVerified             Boolean           @default(false)
  emailVerificationToken      String?
  emailVerificationIssuedAt   DateTime?
  emailVerificationRedeemedAt DateTime?
  phoneNumber                 String            @unique @default("")
  password                    String
  role                        String            @default("CUSTOMER")
  passwordResetToken          String?
  passwordResetIssuedAt       DateTime?
  passwordResetRedeemedAt     DateTime?
  firstOrderDiscountEligible  Boolean           @default(true)
  delivaryAddress             DelivaryAddress[] @relation("DelivaryAddress_user")
  cart                        Cart?             @relation("Cart_user")
  orders                      Order[]           @relation("Order_user")
  payments                    Payment[]         @relation("Payment_user")
  createdAt                   DateTime?         @default(now())
  lastLogin                   DateTime?
}

model DelivaryAddress {
  id         String  @id @default(uuid()) @postgresql.Uuid
  user       User?   @relation("DelivaryAddress_user", fields: [userId], references: [id])
  userId     String? @map("user") @postgresql.Uuid
  street     String  @default("")
  city       String  @default("")
  postalCode String  @default("")
  isDefault  Boolean @default(true)

  @@index([userId])
}

model Product {
  id                     String                @id @default(uuid()) @postgresql.Uuid
  category               Category?             @relation("Product_category", fields: [categoryId], references: [id])
  categoryId             String?               @map("category") @postgresql.Uuid
  name                   String                @default("")
  slug                   String                @unique @default("")
  description            String                @default("")
  basePrice              Int
  baseWeight             Decimal?              @postgresql.Decimal(4, 1)
  basePieces             Int?
  carbonhydrate          Decimal?              @postgresql.Decimal(5, 2)
  calories               Decimal?              @postgresql.Decimal(5, 2)
  protein                Decimal?              @postgresql.Decimal(5, 2)
  fat                    Decimal?              @postgresql.Decimal(5, 2)
  lifeShelf              Int
  ingredients            String                @default("")
  stockQuantity          Int
  isAvailable            Boolean               @default(true)
  badge                  String?
  isFeatured             Boolean               @default(false)
  isHomeHero             Boolean               @default(false)
  homeHeroText           String                @default("")
  isCategoryHero         Boolean               @default(false)
  categoryHeroText       String                @default("")
  images                 ProductImage[]        @relation("ProductImage_product")
  video_filesize         Int?
  video_filename         String?
  variants               ProductVariant[]      @relation("ProductVariant_product")
  customization          ProductCustomization? @relation("Product_customization", fields: [customizationId], references: [id])
  customizationId        String?               @unique @map("customization") @postgresql.Uuid
  topping                Topping?              @relation("Product_topping", fields: [toppingId], references: [id])
  toppingId              String?               @unique @map("topping") @postgresql.Uuid
  cartItems              CartItem[]            @relation("CartItem_product")
  createdAt              DateTime?             @default(now())
  updatedAt              DateTime?
  from_OrderItem_product OrderItem[]           @relation("OrderItem_product")

  @@index([categoryId])
}

model ProductImage {
  id              String   @id @default(uuid()) @postgresql.Uuid
  product         Product? @relation("ProductImage_product", fields: [productId], references: [id])
  productId       String?  @map("product") @postgresql.Uuid
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  altText         String   @default("")

  @@index([productId])
}

model ProductVariant {
  id                     String      @id @default(uuid()) @postgresql.Uuid
  product                Product?    @relation("ProductVariant_product", fields: [productId], references: [id])
  productId              String?     @map("product") @postgresql.Uuid
  price                  Int
  pieces                 Int?
  weight                 Decimal?    @postgresql.Decimal(4, 1)
  isAvailable            Boolean     @default(true)
  createdAt              DateTime?   @default(now())
  updatedAt              DateTime?
  from_CartItem_variant  CartItem[]  @relation("CartItem_variant")
  from_OrderItem_variant OrderItem[] @relation("OrderItem_variant")

  @@index([productId])
}

model Category {
  id                   String     @id @default(uuid()) @postgresql.Uuid
  name                 String     @default("")
  slug                 String     @unique @default("")
  parent               Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId             String?    @map("parent") @postgresql.Uuid
  products             Product[]  @relation("Product_category")
  from_Category_parent Category[] @relation("Category_parent")

  @@index([parentId])
}

model ProductCustomization {
  id            String                @id @default(uuid()) @postgresql.Uuid
  product       Product?              @relation("Product_customization")
  customOptions CustomizationOption[] @relation("CustomizationOption_productCustomization")
  createdAt     DateTime?             @default(now())
  updatedAt     DateTime?
}

model CustomizationOption {
  id                     String                     @id @default(uuid()) @postgresql.Uuid
  productCustomization   ProductCustomization?      @relation("CustomizationOption_productCustomization", fields: [productCustomizationId], references: [id])
  productCustomizationId String?                    @map("productCustomization") @postgresql.Uuid
  name                   String?                    @unique
  customValues           CustomizationOptionValue[] @relation("CustomizationOptionValue_option")
  createdAt              DateTime?                  @default(now())
  updatedAt              DateTime?

  @@index([productCustomizationId])
}

model CustomizationOptionValue {
  id                 String                         @id @default(uuid()) @postgresql.Uuid
  option             CustomizationOption?           @relation("CustomizationOptionValue_option", fields: [optionId], references: [id])
  optionId           String?                        @map("option") @postgresql.Uuid
  value              String                         @default("")
  extraPrice         Int?
  optionConstraint   CustomizationOptionConstraint? @relation("CustomizationOptionValue_optionConstraint", fields: [optionConstraintId], references: [id])
  optionConstraintId String?                        @map("optionConstraint") @postgresql.Uuid
  createdAt          DateTime?                      @default(now())
  updatedAt          DateTime?

  @@index([optionId])
  @@index([optionConstraintId])
}

model Topping {
  id        String          @id @default(uuid()) @postgresql.Uuid
  product   Product?        @relation("Product_topping")
  name      String          @unique @default("")
  slug      String          @unique @default("")
  options   ToppingOption[] @relation("ToppingOption_topping")
  createdAt DateTime?       @default(now())
  updatedAt DateTime?
}

model ToppingOption {
  id         String     @id @default(uuid()) @postgresql.Uuid
  topping    Topping?   @relation("ToppingOption_topping", fields: [toppingId], references: [id])
  toppingId  String?    @map("topping") @postgresql.Uuid
  cartItems  CartItem[] @relation("CartItem_topping")
  weight     Decimal?   @postgresql.Decimal(5, 3)
  pieces     Int?
  extraPrice Int
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?

  @@index([toppingId])
}

model CustomizationOptionConstraint {
  id           String                     @id @default(uuid()) @postgresql.Uuid
  optionValues CustomizationOptionValue[] @relation("CustomizationOptionValue_optionConstraint")
  key          String?
  minValue     Decimal?                   @postgresql.Decimal(4, 1)
  maxValue     Decimal?                   @postgresql.Decimal(4, 1)
  createdAt    DateTime?                  @default(now())
  updatedAt    DateTime?
}

model Cart {
  id        String     @id @default(uuid()) @postgresql.Uuid
  user      User?      @relation("Cart_user", fields: [userId], references: [id])
  userId    String?    @unique @map("user") @postgresql.Uuid
  cartItems CartItem[] @relation("CartItem_cart")
  subTotal  Int?
  createdAt DateTime?  @default(now())
  updatedAt DateTime?
}

model CartItem {
  id                    String          @id @default(uuid()) @postgresql.Uuid
  cart                  Cart?           @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId                String?         @map("cart") @postgresql.Uuid
  product               Product?        @relation("CartItem_product", fields: [productId], references: [id])
  productId             String?         @map("product") @postgresql.Uuid
  variant               ProductVariant? @relation("CartItem_variant", fields: [variantId], references: [id])
  variantId             String?         @map("variant") @postgresql.Uuid
  topping               ToppingOption?  @relation("CartItem_topping", fields: [toppingId], references: [id])
  toppingId             String?         @map("topping") @postgresql.Uuid
  quantity              Int?            @default(1)
  unitPrice             Int?
  subTotal              Int?
  productSnapShot       Json?
  variantSnapShot       Json?
  customizationSnapShot Json?
  createdAt             DateTime?       @default(now())
  updatedAt             DateTime?

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
  @@index([toppingId])
}

model Order {
  id             String      @id @default(uuid()) @postgresql.Uuid
  user           User?       @relation("Order_user", fields: [userId], references: [id])
  userId         String?     @map("user") @postgresql.Uuid
  orderItems     OrderItem[] @relation("OrderItem_order")
  orderNumber    String      @unique @default("")
  shippingCost   Int?
  subTotalAmount Int?
  totalAmount    Int?
  status         String?     @default("PROCESSING")
  payment        Payment?    @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId      String?     @unique @map("payment") @postgresql.Uuid
  message        String      @default("")
  createdAt      DateTime?   @default(now())
  updatedAt      DateTime?

  @@index([userId])
}

model OrderItem {
  id                    String          @id @default(uuid()) @postgresql.Uuid
  order                 Order?          @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId               String?         @map("order") @postgresql.Uuid
  product               Product?        @relation("OrderItem_product", fields: [productId], references: [id])
  productId             String?         @map("product") @postgresql.Uuid
  variant               ProductVariant? @relation("OrderItem_variant", fields: [variantId], references: [id])
  variantId             String?         @map("variant") @postgresql.Uuid
  quantity              Int?            @default(1)
  unitPrice             Int?
  subTotal              Int?
  productSnapShot       Json?
  variantSnapShot       Json?
  customizationSnapShot Json?
  toppingSnapShot       Json?
  createdAt             DateTime?       @default(now())
  updatedAt             DateTime?

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Payment {
  id              String    @id @default(uuid()) @postgresql.Uuid
  user            User?     @relation("Payment_user", fields: [userId], references: [id])
  userId          String?   @map("user") @postgresql.Uuid
  order           Order?    @relation("Order_payment")
  paymentId       String    @unique @default("")
  confirmationUrl String    @default("")
  amount          String    @default("")
  method          String    @default("")
  status          String    @default("pending")
  paidAt          DateTime?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime?

  @@index([userId])
}
