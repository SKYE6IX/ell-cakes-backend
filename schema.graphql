# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  isEmailVerified: Boolean
  emailVerificationToken: PasswordState
  emailVerificationIssuedAt: DateTime
  emailVerificationRedeemedAt: DateTime
  phoneNumber: String
  password: PasswordState
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  role: String
  firstOrderDiscountEligible: Boolean
  delivaryAddress(where: DelivaryAddressWhereInput! = {}, orderBy: [DelivaryAddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DelivaryAddressWhereUniqueInput): [DelivaryAddress!]
  delivaryAddressCount(where: DelivaryAddressWhereInput! = {}): Int
  createdAt: DateTime
  lastLogin: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
  phoneNumber: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  isEmailVerified: BooleanFilter
  emailVerificationToken: PasswordFilter
  emailVerificationIssuedAt: DateTimeNullableFilter
  emailVerificationRedeemedAt: DateTimeNullableFilter
  phoneNumber: StringFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  role: StringFilter
  firstOrderDiscountEligible: BooleanFilter
  delivaryAddress: DelivaryAddressManyRelationFilter
  createdAt: DateTimeNullableFilter
  lastLogin: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input DelivaryAddressManyRelationFilter {
  every: DelivaryAddressWhereInput
  some: DelivaryAddressWhereInput
  none: DelivaryAddressWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  isEmailVerified: OrderDirection
  emailVerificationIssuedAt: OrderDirection
  emailVerificationRedeemedAt: OrderDirection
  phoneNumber: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  role: OrderDirection
  firstOrderDiscountEligible: OrderDirection
  createdAt: OrderDirection
  lastLogin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  isEmailVerified: Boolean
  emailVerificationToken: String
  emailVerificationIssuedAt: DateTime
  emailVerificationRedeemedAt: DateTime
  phoneNumber: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  role: String
  firstOrderDiscountEligible: Boolean
  delivaryAddress: DelivaryAddressRelateToManyForUpdateInput
  createdAt: DateTime
  lastLogin: DateTime
}

input DelivaryAddressRelateToManyForUpdateInput {
  disconnect: [DelivaryAddressWhereUniqueInput!]
  set: [DelivaryAddressWhereUniqueInput!]
  create: [DelivaryAddressCreateInput!]
  connect: [DelivaryAddressWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  isEmailVerified: Boolean
  emailVerificationToken: String
  emailVerificationIssuedAt: DateTime
  emailVerificationRedeemedAt: DateTime
  phoneNumber: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  role: String
  firstOrderDiscountEligible: Boolean
  delivaryAddress: DelivaryAddressRelateToManyForCreateInput
  createdAt: DateTime
  lastLogin: DateTime
}

input DelivaryAddressRelateToManyForCreateInput {
  create: [DelivaryAddressCreateInput!]
  connect: [DelivaryAddressWhereUniqueInput!]
}

type DelivaryAddress {
  id: ID!
  user: User
  street: String
  city: String
  postalCode: String
  isDefault: Boolean
}

input DelivaryAddressWhereUniqueInput {
  id: ID
}

input DelivaryAddressWhereInput {
  AND: [DelivaryAddressWhereInput!]
  OR: [DelivaryAddressWhereInput!]
  NOT: [DelivaryAddressWhereInput!]
  id: IDFilter
  user: UserWhereInput
  street: StringFilter
  city: StringFilter
  postalCode: StringFilter
  isDefault: BooleanFilter
}

input DelivaryAddressOrderByInput {
  id: OrderDirection
  street: OrderDirection
  city: OrderDirection
  postalCode: OrderDirection
  isDefault: OrderDirection
}

input DelivaryAddressUpdateInput {
  user: UserRelateToOneForUpdateInput
  street: String
  city: String
  postalCode: String
  isDefault: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input DelivaryAddressUpdateArgs {
  where: DelivaryAddressWhereUniqueInput!
  data: DelivaryAddressUpdateInput!
}

input DelivaryAddressCreateInput {
  user: UserRelateToOneForCreateInput
  street: String
  city: String
  postalCode: String
  isDefault: Boolean
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Product {
  id: ID!
  category: Category
  name: String
  slug: String
  description: String
  weight: Decimal
  price: Decimal
  images(where: ProductImageWhereInput! = {}, orderBy: [ProductImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductImageWhereUniqueInput): [ProductImage!]
  imagesCount(where: ProductImageWhereInput! = {}): Int
  isAvailable: Boolean
  stockQuantity: Int
  lifeShelf: Int
  ingredients: String
  badge: String
  isFeatured: Boolean
  heroLabel: String
  variants(where: ProductVariantWhereInput! = {}, orderBy: [ProductVariantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductVariantWhereUniqueInput): [ProductVariant!]
  variantsCount(where: ProductVariantWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar Decimal

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  category: CategoryWhereInput
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  weight: DecimalNullableFilter
  price: DecimalFilter
  images: ProductImageManyRelationFilter
  isAvailable: BooleanFilter
  stockQuantity: IntFilter
  lifeShelf: IntFilter
  ingredients: StringFilter
  badge: StringNullableFilter
  isFeatured: BooleanFilter
  heroLabel: StringFilter
  variants: ProductVariantManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  weight: OrderDirection
  price: OrderDirection
  isAvailable: OrderDirection
  stockQuantity: OrderDirection
  lifeShelf: OrderDirection
  ingredients: OrderDirection
  badge: OrderDirection
  isFeatured: OrderDirection
  heroLabel: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductUpdateInput {
  category: CategoryRelateToOneForUpdateInput
  name: String
  slug: String
  description: String
  weight: Decimal
  price: Decimal
  images: ProductImageRelateToManyForUpdateInput
  isAvailable: Boolean
  stockQuantity: Int
  lifeShelf: Int
  ingredients: String
  badge: String
  isFeatured: Boolean
  heroLabel: String
  variants: ProductVariantRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  category: CategoryRelateToOneForCreateInput
  name: String
  slug: String
  description: String
  weight: Decimal
  price: Decimal
  images: ProductImageRelateToManyForCreateInput
  isAvailable: Boolean
  stockQuantity: Int
  lifeShelf: Int
  ingredients: String
  badge: String
  isFeatured: Boolean
  heroLabel: String
  variants: ProductVariantRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  image: ImageFieldOutput
  altText: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: ImageFieldInput
  altText: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: ImageFieldInput
  altText: String
}

type ProductVariant {
  id: ID!
  product: Product
  weight: Decimal
  price: Decimal
  stockQuantity: Int
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  weight: DecimalFilter
  price: DecimalFilter
  stockQuantity: IntFilter
  isAvailable: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProductVariantOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  price: OrderDirection
  stockQuantity: OrderDirection
  isAvailable: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductVariantUpdateInput {
  product: ProductRelateToOneForUpdateInput
  weight: Decimal
  price: Decimal
  stockQuantity: Int
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  product: ProductRelateToOneForCreateInput
  weight: Decimal
  price: Decimal
  stockQuantity: Int
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Topping {
  id: ID!
  name: String
  description: String
  price: Decimal
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ToppingWhereUniqueInput {
  id: ID
}

input ToppingWhereInput {
  AND: [ToppingWhereInput!]
  OR: [ToppingWhereInput!]
  NOT: [ToppingWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: DecimalNullableFilter
  isAvailable: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ToppingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  isAvailable: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ToppingUpdateInput {
  name: String
  description: String
  price: Decimal
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ToppingUpdateArgs {
  where: ToppingWhereUniqueInput!
  data: ToppingUpdateInput!
}

input ToppingCreateInput {
  name: String
  description: String
  price: Decimal
  isAvailable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Category {
  id: ID!
  name: String
  slug: String
  parent: Category
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  parent: CategoryWhereInput
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  parent: CategoryRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  parent: CategoryRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDelivaryAddress(data: DelivaryAddressCreateInput!): DelivaryAddress
  createDelivaryAddresses(data: [DelivaryAddressCreateInput!]!): [DelivaryAddress]
  updateDelivaryAddress(where: DelivaryAddressWhereUniqueInput!, data: DelivaryAddressUpdateInput!): DelivaryAddress
  updateDelivaryAddresses(data: [DelivaryAddressUpdateArgs!]!): [DelivaryAddress]
  deleteDelivaryAddress(where: DelivaryAddressWhereUniqueInput!): DelivaryAddress
  deleteDelivaryAddresses(where: [DelivaryAddressWhereUniqueInput!]!): [DelivaryAddress]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(where: ProductImageWhereUniqueInput!, data: ProductImageUpdateInput!): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(where: ProductVariantWhereUniqueInput!, data: ProductVariantUpdateInput!): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(where: [ProductVariantWhereUniqueInput!]!): [ProductVariant]
  createTopping(data: ToppingCreateInput!): Topping
  createToppings(data: [ToppingCreateInput!]!): [Topping]
  updateTopping(where: ToppingWhereUniqueInput!, data: ToppingUpdateInput!): Topping
  updateToppings(data: [ToppingUpdateArgs!]!): [Topping]
  deleteTopping(where: ToppingWhereUniqueInput!): Topping
  deleteToppings(where: [ToppingWhereUniqueInput!]!): [Topping]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  verifyEmail(token: String!, email: String!): VerifyEmailResponse
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  delivaryAddress(where: DelivaryAddressWhereUniqueInput!): DelivaryAddress
  delivaryAddresses(where: DelivaryAddressWhereInput! = {}, orderBy: [DelivaryAddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DelivaryAddressWhereUniqueInput): [DelivaryAddress!]
  delivaryAddressesCount(where: DelivaryAddressWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImages(where: ProductImageWhereInput! = {}, orderBy: [ProductImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductImageWhereUniqueInput): [ProductImage!]
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariants(where: ProductVariantWhereInput! = {}, orderBy: [ProductVariantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductVariantWhereUniqueInput): [ProductVariant!]
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  topping(where: ToppingWhereUniqueInput!): Topping
  toppings(where: ToppingWhereInput! = {}, orderBy: [ToppingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToppingWhereUniqueInput): [Topping!]
  toppingsCount(where: ToppingWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type VerifyEmailResponse {
  status: Boolean
  message: String
}
