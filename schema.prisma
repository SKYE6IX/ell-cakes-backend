// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String            @id @default(uuid()) @postgresql.Uuid
  firstName                   String            @default("")
  lastName                    String            @default("")
  email                       String            @unique @default("")
  isEmailVerified             Boolean           @default(false)
  emailVerificationToken      String?
  emailVerificationIssuedAt   DateTime?
  emailVerificationRedeemedAt DateTime?
  phoneNumber                 String            @unique @default("")
  password                    String
  passwordResetToken          String?
  passwordResetIssuedAt       DateTime?
  passwordResetRedeemedAt     DateTime?
  role                        String            @default("CUSTOMER")
  firstOrderDiscountEligible  Boolean           @default(true)
  delivaryAddress             DelivaryAddress[] @relation("DelivaryAddress_user")
  createdAt                   DateTime?         @default(now())
  lastLogin                   DateTime?
}

model DelivaryAddress {
  id         String  @id @default(uuid()) @postgresql.Uuid
  user       User?   @relation("DelivaryAddress_user", fields: [userId], references: [id])
  userId     String? @map("user") @postgresql.Uuid
  street     String  @default("")
  city       String  @default("")
  postalCode String  @default("")
  isDefault  Boolean @default(true)

  @@index([userId])
}

model Product {
  id            String           @id @default(uuid()) @postgresql.Uuid
  category      Category?        @relation("Product_category", fields: [categoryId], references: [id])
  categoryId    String?          @map("category") @postgresql.Uuid
  name          String           @default("")
  slug          String           @unique @default("")
  description   String           @default("")
  weight        Decimal?         @postgresql.Decimal(3, 1)
  price         Decimal          @postgresql.Decimal(10, 2)
  images        ProductImage[]   @relation("Product_images")
  isAvailable   Boolean          @default(true)
  stockQuantity Int
  lifeShelf     Int
  ingredients   String           @default("")
  badge         String?
  isFeatured    Boolean          @default(false)
  heroLabel     String           @default("")
  variants      ProductVariant[] @relation("ProductVariant_product")
  createdAt     DateTime?        @default(now())
  updatedAt     DateTime?

  @@index([categoryId])
}

model ProductImage {
  id                  String    @id @default(uuid()) @postgresql.Uuid
  image_id            String?
  image_filesize      Int?
  image_width         Int?
  image_height        Int?
  image_extension     String?
  altText             String    @default("")
  from_Product_images Product[] @relation("Product_images")
}

model ProductVariant {
  id            String    @id @default(uuid()) @postgresql.Uuid
  product       Product?  @relation("ProductVariant_product", fields: [productId], references: [id])
  productId     String?   @map("product") @postgresql.Uuid
  weight        Decimal   @postgresql.Decimal(3, 1)
  price         Decimal   @postgresql.Decimal(10, 2)
  stockQuantity Int       @default(0)
  isAvailable   Boolean   @default(true)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?

  @@index([productId])
}

model Topping {
  id          String    @id @default(uuid()) @postgresql.Uuid
  name        String    @default("")
  description String    @default("")
  price       Decimal?  @postgresql.Decimal(10, 2)
  isAvailable Boolean   @default(true)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Category {
  id                   String     @id @default(uuid()) @postgresql.Uuid
  name                 String     @default("")
  slug                 String     @unique @default("")
  parent               Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId             String?    @map("parent") @postgresql.Uuid
  products             Product[]  @relation("Product_category")
  from_Category_parent Category[] @relation("Category_parent")

  @@index([parentId])
}
