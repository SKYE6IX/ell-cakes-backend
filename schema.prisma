// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String            @id @default(uuid()) @postgresql.Uuid
  firstName                   String            @default("")
  lastName                    String            @default("")
  email                       String            @unique @default("")
  isEmailVerified             Boolean           @default(false)
  emailVerificationToken      String?
  emailVerificationIssuedAt   DateTime?
  emailVerificationRedeemedAt DateTime?
  phoneNumber                 String            @unique @default("")
  password                    String
  role                        String            @default("CUSTOMER")
  passwordResetToken          String?
  passwordResetIssuedAt       DateTime?
  passwordResetRedeemedAt     DateTime?
  firstOrderDiscountEligible  Boolean           @default(true)
  delivaryAddress             DelivaryAddress[] @relation("DelivaryAddress_user")
  createdAt                   DateTime?         @default(now())
  lastLogin                   DateTime?
}

model DelivaryAddress {
  id         String  @id @default(uuid()) @postgresql.Uuid
  user       User?   @relation("DelivaryAddress_user", fields: [userId], references: [id])
  userId     String? @map("user") @postgresql.Uuid
  street     String  @default("")
  city       String  @default("")
  postalCode String  @default("")
  isDefault  Boolean @default(true)

  @@index([userId])
}

model Product {
  id               String                @id @default(uuid()) @postgresql.Uuid
  category         Category?             @relation("Product_category", fields: [categoryId], references: [id])
  categoryId       String?               @map("category") @postgresql.Uuid
  name             String                @default("")
  slug             String                @unique @default("")
  description      String                @default("")
  basePrice        Decimal               @postgresql.Decimal(10, 2)
  baseWeight       Decimal?              @postgresql.Decimal(4, 1)
  basePieces       Int?
  carbonhydrate    Decimal?              @postgresql.Decimal(5, 2)
  calories         Decimal?              @postgresql.Decimal(5, 2)
  protein          Decimal?              @postgresql.Decimal(5, 2)
  fat              Decimal?              @postgresql.Decimal(5, 2)
  lifeShelf        Int
  ingredients      String                @default("")
  stockQuantity    Int
  isAvailable      Boolean               @default(true)
  badge            String?
  isFeatured       Boolean               @default(false)
  isHomeHero       Boolean               @default(false)
  homeHeroText     String                @default("")
  isCategoryHero   Boolean               @default(false)
  categoryHeroText String                @default("")
  images           ProductImage[]        @relation("ProductImage_product")
  video_filesize   Int?
  video_filename   String?
  variants         ProductVariant[]      @relation("ProductVariant_product")
  customization    ProductCustomization? @relation("Product_customization", fields: [customizationId], references: [id])
  customizationId  String?               @unique @map("customization") @postgresql.Uuid
  topping          Topping?              @relation("Product_topping", fields: [toppingId], references: [id])
  toppingId        String?               @unique @map("topping") @postgresql.Uuid
  createdAt        DateTime?             @default(now())
  updatedAt        DateTime?

  @@index([categoryId])
}

model ProductImage {
  id              String   @id @default(uuid()) @postgresql.Uuid
  product         Product? @relation("ProductImage_product", fields: [productId], references: [id])
  productId       String?  @map("product") @postgresql.Uuid
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  altText         String   @default("")

  @@index([productId])
}

model ProductVariant {
  id          String    @id @default(uuid()) @postgresql.Uuid
  product     Product?  @relation("ProductVariant_product", fields: [productId], references: [id])
  productId   String?   @map("product") @postgresql.Uuid
  price       Decimal   @postgresql.Decimal(10, 2)
  pieces      Int?
  weight      Decimal?  @postgresql.Decimal(4, 1)
  isAvailable Boolean   @default(true)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([productId])
}

model Category {
  id                   String     @id @default(uuid()) @postgresql.Uuid
  name                 String     @default("")
  slug                 String     @unique @default("")
  parent               Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId             String?    @map("parent") @postgresql.Uuid
  products             Product[]  @relation("Product_category")
  from_Category_parent Category[] @relation("Category_parent")

  @@index([parentId])
}

model ProductCustomization {
  id            String                @id @default(uuid()) @postgresql.Uuid
  product       Product?              @relation("Product_customization")
  customOptions CustomizationOption[] @relation("ProductCustomization_customOptions")
  createdAt     DateTime?             @default(now())
  updatedAt     DateTime?
}

model CustomizationOption {
  id                                      String                     @id @default(uuid()) @postgresql.Uuid
  name                                    String?                    @unique
  slug                                    String                     @unique @default("")
  customValues                            CustomizationOptionValue[] @relation("CustomizationOptionValue_option")
  createdAt                               DateTime?                  @default(now())
  updatedAt                               DateTime?
  from_ProductCustomization_customOptions ProductCustomization[]     @relation("ProductCustomization_customOptions")
}

model CustomizationOptionValue {
  id                 String                         @id @default(uuid()) @postgresql.Uuid
  option             CustomizationOption?           @relation("CustomizationOptionValue_option", fields: [optionId], references: [id])
  optionId           String?                        @map("option") @postgresql.Uuid
  value              String                         @default("")
  extraPrice         Decimal?                       @postgresql.Decimal(10, 2)
  optionConstraint   CustomizationOptionConstraint? @relation("CustomizationOptionValue_optionConstraint", fields: [optionConstraintId], references: [id])
  optionConstraintId String?                        @map("optionConstraint") @postgresql.Uuid
  createdAt          DateTime?                      @default(now())
  updatedAt          DateTime?

  @@index([optionId])
  @@index([optionConstraintId])
}

model Topping {
  id        String          @id @default(uuid()) @postgresql.Uuid
  product   Product?        @relation("Product_topping")
  name      String          @unique @default("")
  slug      String          @unique @default("")
  options   ToppingOption[] @relation("ToppingOption_topping")
  createdAt DateTime?       @default(now())
  updatedAt DateTime?
}

model ToppingOption {
  id         String    @id @default(uuid()) @postgresql.Uuid
  topping    Topping?  @relation("ToppingOption_topping", fields: [toppingId], references: [id])
  toppingId  String?   @map("topping") @postgresql.Uuid
  weight     Decimal?  @postgresql.Decimal(5, 3)
  pieces     Int?
  extraPrice Decimal   @postgresql.Decimal(18, 4)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  @@index([toppingId])
}

model CustomizationOptionConstraint {
  id           String                     @id @default(uuid()) @postgresql.Uuid
  optionValues CustomizationOptionValue[] @relation("CustomizationOptionValue_optionConstraint")
  key          String?
  minValue     Decimal?                   @postgresql.Decimal(4, 1)
  maxValue     Decimal?                   @postgresql.Decimal(4, 1)
  createdAt    DateTime?                  @default(now())
  updatedAt    DateTime?
}
